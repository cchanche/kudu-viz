import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { mockApiCall } from './api';

export type Antelope = {
  name: string;
  continent: string;
  weight: number;
  height: number;
  horns: string;
  picture: string;
};

export interface AntelopesState {
  data: Antelope[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AntelopesState = {
  data: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAsync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk<AntelopesState['data']>('antelopes/fetch', async () => {
  // blocked by CORS
  // const res = await fetch('https://work-sample-mk-fs.s3-us-west-2.amazonaws.com/species.json').then(
  //   (data) => data.json(),
  // );

  const res = await mockApiCall();

  return res.data;
});

export const antelopes = createSlice({
  name: 'antelopes',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      })
      .addCase(fetchAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const {} = antelopes.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getAntelopes = (state: RootState) => state.antelopes;

export default antelopes.reducer;
